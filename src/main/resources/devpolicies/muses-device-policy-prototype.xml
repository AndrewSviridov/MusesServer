<!--
    This is an example of the policy configuration file that the MUSES
    server could send to the device. This file is supposed to be
    generated by the CRTEP, which knows about the trust
    of the user, the trust of the device, the risks associated,
    the high-level policy specified by the security area of the
    company, other contextual information, etc
    
    All this could be wrong: please, send your comments and
    policy additions. Thanks and BR,
    S2Grupo
-->

<!--
    We must specify how a policy file like this one is interpreted. The
    semantics contained in the policy should be converted into efficient
    data structures to allow a fast interpretation. These data
    structures should support incremental updates, calculating a
    "diff" of two given policies. Two policies like this could be
    used: one for online mode, and one for offline mode
-->

<!--
    This file and the data structures representation of it must be
    encrypted as stored in the device (once in memory, of course they
    must be in unencrypted form). We don't want other people to know
    about the company policy
-->

<muses-device-policy schema-version="1.0">

    <!--
        The device will update its policy if this number is greater
        than the stored one
    -->
    <revision>1.0</revision>


    <!--
        APPLICATION USAGE POLICY
    -->
    <apps>
        <!--
            The apps which are allowed (or not) to be installed
        -->
        <installed>
            <!-- Is the user allowed to install new apps? -->
            <allow-install>true</allow-install>
            
            <!-- The installed apps must be kept up to date? -->
            <must-be-updated>true</must-be-updated>
            
            <!--
                We check when a new app is installed, and additionaly
                every day (maybe MUSES was disabled or something and
                a new app was installed)
            -->
            <check-interval>day</check-interval>
            
            <!-- Allow the installation of these apps -->
            <installed-whitelist>
                <app>The UUID of the app</app>
                <app>The UUID of the app</app>
                <app>ALL</app> <!-- To allow any installation -->
            </installed-whitelist>
            <!-- Deny the installation of these apps -->
            <installed-blacklist>
                <app>The UUID of the app</app>
                <app>The UUID of the app</app>
                <app>ALL</app> <!-- To deny any installation -->
            </installed-blacklist>
            
            <!-- What to do on policy violations -->
            <on-violation>
                <notify-user /> <!-- Notify the user via popup or similar -->
                <notify-soc /> <!-- Notify the security operations center -->
                <!--
                    Could include more action types, for example for
                    MUSES aware apps vs. MUSES non-aware apps
                --> 
            </on-violation>
        </installed>
    
        <!--
            Even if an app is allowed to be installed, perhaps we
            don't want it to be executed when the employee is in
            the office, in his house, in the road, with an insecure
            Internet connection, and so on. The CRTEP
            in the server will setup this section as appropiate for
            each situation.
        -->
        <running>
            <!-- Allow these apps -->
            <allow>
                <app>The UUID of the app</app>
                <app>The UUID of the app</app>
                <!-- Allow these two running apps at the same time -->
                <concurrent>
                    <app>The UUID of the app</app>
                    <app>The UUID of the app</app>
                </concurrent>
                <app>ALL</app> <!-- To allow all apps -->
            </allow>
            <!-- Deny these apps -->
            <deny>
                <app>The UUID of the app</app>
                <app>The UUID of the app</app>
                <!-- Deny these two running apps at the same time -->
                <concurrent>
                    <app>The UUID of the app</app>
                    <app>The UUID of the app</app>
                </concurrent>
                <app>ALL</app> <!-- To deny all apps -->
            </deny>
            <!-- What to do on policy violations -->
            <on-violation>
                <notify-user />
                <notify-soc />
            </on-violation>
        </running>
        
        <!--
            Perhaps we don't care what apps are installed or not, or
            running or not, but we care about the permissions these
            apps are using. For example, we don't want Whatsapp on
            company devices, because all contacts would leak. The
            permissions here are somewhat generic and must be
            translated into the concrete permissions as used on
            Android, iOS, etc.
        -->
        <permissions>
            <allow>
                <!-- Allow these permissions -->
                <perm>NETWORK_ACCESS</perm>
                <perm>SMS_SEND</perm>
                <perm>ALL</perm> <!-- To allow all -->
                <!--
                    Allow the usage of these two permissions
                    by any app using them, at the same time
                -->
                <concurrent>
                    <perm>FOO</perm>
                    <perm>BAR</perm>
                </concurrent>
            </allow>
            <deny>
                <!-- Deny these permissions -->
                <perm>NETWORK_ACCESS</perm>
                <perm>SMS_SEND</perm>
                <perm>ALL</perm> <!-- To deny all -->
                <!--
                    Deny the usage of these two permissions
                    by any app using them, at the same time
                -->
                <concurrent>
                    <!-- We don't want data exfiltration! -->
                    <perm>DISK_ACCESS</perm>
                    <perm>NETWORK_ACCESS</perm>
                </concurrent>
            </deny>
            <!-- What to do on policy violations -->
            <on-violation>
                <notify-user />
                <notify-soc />
            </on-violation>
        </permissions>
    </apps>


    <!--
        WEB BROWSING POLICY
    -->
    <web>
    
        <!-- Do we allow access to non-HTTPS secured web sites? -->
        <allow-insecure>true</allow-insecure>
        <!--
            Here we could also put the HTTPS (SSL) algotihms allowed
            or denied (AES, 3DES, etc.)
        -->        
    
        <!-- Do we allow access to FTP via the browser? -->
        <allow-ftp>false</allow-ftp>
    
        <urls>
            <allow>
                <!-- Allow these URLs (could be regular expressions) -->
                <url>http://www.unige.ch</url>
                <url>http://www.s2grupo.es</url>
                <url>ALL</url> <!-- To allow all -->
            </allow>
            <deny>
                <!-- Deny these URLs (could be regular expressions) -->
                <url>http://thepiratebay.sx</url>
                <url>http://mininova.org</url>
                <url>ALL</url> <!-- To deny all -->
            </deny>
        </urls>

        <!--
            The web browsers allowed or denied could be specified here
            in another subsection or directly into the apps section,
            allowing or denying the browser apps
        -->
        
        <!--
            Web browser plugins that we allow or deny
        -->
        <plugins>
            <allow>
                <!-- Allow these web browser plugins -->
                <plugin>The ID of the plugin</plugin>
                <plugin>The ID of the plugin</plugin>
                <plugin>ALL</plugin> <!-- Allow all plugins -->
            </allow>
            <deny>
                <!-- Deny these web browser plugins -->
                <plugin>The ID of the plugin</plugin>
                <plugin>The ID of the plugin</plugin>
                <plugin>ALL</plugin> <!-- Deny all plugins -->
            </deny>
        </plugins>

        <!--
            Here we could add permissions for specific technologies;
            for example, we could allow or deny Flash, Java, etc.
            For example, if a new vulnerability is discovered for Flash
            for Android, the SoC can inject into the policy that
            Flash usage is denied. When the devices get updated,
            the SoC can allow it again.
        -->

        <!-- What to do on policy violations -->
        <on-violation>
            <notify-user />
            <notify-soc />
        </on-violation>

    </web>


    <!--
        ANTIVIRUS POLICY
    -->
    <antivirus>
        <!-- Is an antivirus required? -->
        <required>true</required>
        
        <!-- The antivirus must be up to date? -->
        <updated>true</updated>
        <!-- We check the AV is updated all days -->
        <check-interval>day</check-interval>
        
        <!--
            This can be specified here or inside the
            apps section (perhaps in some device the
            AV is not treated like a standard app)
        -->
        <allow>
            <!-- Allow these AVs -->
            <app>The UUID of the AV app</app>
            <app>The UUID of the AV app</app>
            <app>ALL</app> <!-- Allow all AVs -->
        </allow>
        <deny>
            <!-- Deny these AVs -->
            <app>The UUID of the AV app</app>
            <app>The UUID of the AV app</app>
            <app>ALL</app> <!-- Deny all AVs -->
        </deny>        
    </antivirus>

    
    <!--
        STORAGE POLICY
    -->
    <storage>
        <!-- Must the primary storage be encrypted? -->
        <must-encrypt-primary-storage>true</must-encrypt-primary-storage>
    
        <!-- Do we allow an SD card or similar? -->
        <allow-extra-storage>true</allow-extra-storage>
        
        <!-- Must the extra SD card be encrypted? -->
        <must-encrypt-extra-storage>true</must-encrypt-extra-storage>
        
        <!--
            Here we configure how we force the user to classify the data
            that is readable by all apps installed on the device (typically,
            data that is held there by third party apps with too permissive
            permissions, and that could be leaked by any other app).
            
            Each file that the MUSES app can read, the user can classify
            settings these two attributes:
                - Home/Work: the file is personal or professional
                - Encrypted/Unencrypted: the file is ciphered or not
                
            Here we could add more granularity to this configuration
            specifying a concrete path to search for files, instead of
            all the SD card
            
            Probably, other aproximations to the data at rest security
            would be more elegant, but by now I don't know how to do it
            
            For MUSES aware apps, we can add more options here, since
            we will know when a MUSES aware app requests access to a file
        -->
        <data-classification>
            <!-- Must the user classify all the files? -->
            <all-files-classified>true</all-files-classified>
            
            <!-- Must all work files be encrypted? -->
            <all-work-files-encrypted>true</all-work-files-encrypted>
            
            <!-- Must all home files be encrypted? -->
            <all-home-files-encrypted>false</all-home-files-encrypted>
        </data-classification>
        
        <!--
            The same can be said about contacts (perhaps in a separate
            section of the policy file?). Maybe it would be useful to
            force the user to classify all contacts, so we can check
            if there is any app that leaks contact info (for example,
            Whatsapp) and at the same time the user has contacts that
            this app can read
        -->
        <contacts-classification>
            <!-- Similar to the data-classification case; to do ... -->
        </contacts-classification>
    </storage>


    <!--
        NETWORK ENCRYPTION (OR SECURITY) POLICY
    -->
    <network>
    
        <wifi>
            <!-- Do we trust wifi connections at this moment? -->
            <allow-wifi>true</allow-wifi>
            <allow>
                <algo>WPA2 PSK</algo>
                <algo>WPA2 ENTERPRISE</algo>
                <algo>ALL</algo> <!-- To allow all algorithms -->
            </allow>
            <deny>
                <algo>NONE</algo>
                <algo>WEP</algo>
                <algo>ALL</algo> <!-- To deny all algorithms -->
            </deny>
        </wifi>
        
        <connection-3g>
            <!-- Do we trust 3G connection at this moment? -->
            <allow-3g>true</allow-3g>
            <!-- Data carriers to allow or deny -->
            <carriers>
                <allow>
                    <!-- ... -->
                </allow>
                <deny>
                    <!-- ... -->
                </deny>
            </carriers>
            <!-- Do we allow roaming? -->
            <allow-roaming>true</allow-roaming>
        </connection-3g>
        
        <!-- Do we require a VPN setup for any network access? -->
        <require-vpn>false</require-vpn>
        
        <!--
            Here we could add some specifics in the case the user
            is trying to connect to corporate resources: perhaps
            require VPN only in this case, and so on (or maybe
            it's the CRTEP who knows and sets the
            previous settings accordingly)
            
            Perhaps some kind of mask: "if you want to access this
            network range, you need a VPN". Don't know if
            technically it's possible to gather this info
            with the APIs of the devices
        -->
        
    </network>
    

    <!--
        PASSWORD POLICY
    -->
    <password>
        <!--
            Here we specify what protection mechanisms are
            required: any of these is OK. If the user does
            not use a protection mechanism, or the used
            mechanism is another one, this is a violation
        -->
        <require>
            <password /> <!-- Alphanumeric password -->
            <pin /> <!-- PIN with only numbers -->
            <visual /> <!-- Visual picture -->
        </require>
        <!-- If password is required, must it be strong? -->
        <password-must-be-robust>true</password-must-be-robust>
    </password>


    <!--
        DEVICE STOLEN POLICY
    -->
    <!--
        Here we can include some mechanism to wipe the device if
        it's somehow marked as stolen
    -->


    <!--
        PHYSICAL SENSOR POLICY
    -->
    <physical>
        <!--
            Maybe the employer doesn't want people making photos
            or recording conversations while the device is in the
            office. The event correlation could know where the
            device is located, and warn the user that "here the
            camera is not allowed" if the employee tries to take
            a photo
        -->
    
        <camera-allowed>true</camera-allowed>
        
        <micro-allowed>true</micro-allowed>
        
        <!-- And so on, for other physical sensors ... -->
    </physical>


    <!--
        PHONE POLICY
    -->
    <phoning>
        <!--
            Here we can include some policy about the numbers permitted
            for dialing, if SMSs are allowed, if apps accessing the
            CALL or SMS functionality are allowed, etc.
        -->
    </phoning>

</muses-device-policy>
