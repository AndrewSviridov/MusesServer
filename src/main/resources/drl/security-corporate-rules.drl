package MusesDrl


global eu.musesproject.server.eventprocessor.correlator.global.StatusGlobal StatusGlobal
global eu.musesproject.server.eventprocessor.correlator.global.Rt2aeGlobal Rt2aeGlobal

import eu.musesproject.server.eventprocessor.correlator.model.owl.AccessRequest
import eu.musesproject.server.eventprocessor.correlator.model.owl.AppObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.EmailEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.Event
import eu.musesproject.server.eventprocessor.correlator.model.owl.FileObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.OpenFileEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.ConnectivityEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.UserBehaviorEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.VirusCleanedEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.VirusFoundEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.ChangeSecurityPropertyEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.DeviceProtectionEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.SensorAppEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.PackageObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.LocationEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.SecurityIncidentEvent
import eu.musesproject.server.eventprocessor.util.Constants
import java.util.ArrayList
import java.util.Date
import java.util.StringTokenizer

declare Event
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare AppObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare AccessRequest
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare FileObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare OpenFileEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare EmailEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare VirusCleanedEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare VirusFoundEvent
	@role( event )
	@timestamp ( event_date )
	@expires (10m)
end

declare ConnectivityEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare UserBehaviorEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end


declare ChangeSecurityPropertyEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare DeviceProtectionEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare SensorAppEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end


declare PackageObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare LocationEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end

declare SecurityIncidentEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1m)
end


function boolean requiredApp(String name){
	boolean result = false;
	if (name.contains("com.avast.android.mobilesecurity")){
		result = true;
	}else if (name.contains("com.lotus.sync.traveler")){
		result = true;
	}

	return result;
}

function boolean unsafeStorage(String name){
	System.out.println("Safe storage input:"+name);
	boolean result = true;
	if (name.contains("cryptonite")){
		result = false;
	}
	System.out.println("Unsafe storage result:"+result);

	return result;
}

function boolean blacklistedApp(String name){
	boolean result = false;
	if (name.contains("orrent")){
		result = true;
	}else if (name.contains("vuze")){
		result = true;
	}

	return result;
}


function String eventSignature(Event event){
	String result = null;
	if (event instanceof FileObserverEvent){
		result = "";
		FileObserverEvent fEvent = (FileObserverEvent)event;
		result += fEvent.getType();
		result += fEvent.getEvent();
		result += fEvent.getPath();
		result += fEvent.getResourceType();
	}
	return result;
}

rule "Rule firing"
	no-loop true
	dialect "mvel"
	when
		e: Event()
	then
		StatusGlobal.log("-------------------------------------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("Rule firing correctly working!");
		StatusGlobal.log("User:"+e.getUsername()+" Device:"+e.getDeviceId());
		StatusGlobal.log("SessionId:"+e.getSessionId());
		//int id = Rt2aeGlobal.sendDefaultDevicePolicy(e);

	end
	
rule "Sensor app"
	no-loop true
	dialect "mvel"
	when
		e: SensorAppEvent()
	then
		StatusGlobal.log("-------------------------------------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("SensorAppEvent!");
		StatusGlobal.log("User:"+e.getUsername()+" Device:"+e.getDeviceId());

	end

rule "AccessRequest Detection open asset type confidential unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type confidential unsecure wifi") 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening confidential document in unsecure network\nYou are connected to an unsecure network and try to open a confidential document.\nInformation sent over this network is not encrypted and might be visible to other people can observe. Switch to a secure network.","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type confidential unsecure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end

rule "AccessRequest Detection open asset type internal unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="INTERNAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type internal unsecure wifi") 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening internal document in unsecure network\nYou are connected to an unsecure network and try to open a internal document.\nInformation sent over this network is not encrypted and might be visible to other people can observe. Switch to a secure network.","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type internal unsecure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type internal:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


rule "AccessRequest Detection open asset type strictly confidential unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="STRICTLY_CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type strictly confidential unsecure wifi") 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening strictly confidential document in unsecure network\nYou are connected to an unsecure network and try to open a strictly confidential document.\nInformation sent over this network is not encrypted and might be visible to other people can observe. Switch to a secure network.","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type strictly confidential unsecure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type strictly confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	

rule "AccessRequest Detection open asset type confidential secure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type confidential secure wifi") 

	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open asset type confidential secure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		//int id = Rt2aeGlobal.composeAccessRequest(e,conn,"DECIDE", "wifiencryption!=WPA2");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed: This is a confidential asset","ALLOW","<resourceType>confidential</resourceType>");
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed: This is a confidential asset, but you are connected to a secure wifi","ALLOW","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type confidential secure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
		
	end



rule "AccessRequest Detection open asset type internal secure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="INTERNAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type internal secure wifi") 

	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open asset type internal secure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		//int id = Rt2aeGlobal.composeAccessRequest(e,conn,"DECIDE", "wifiencryption!=WPA2");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed: This is a internal asset","ALLOW","<resourceType>INTERNAL</resourceType>");
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed: This is a internal asset, but you are connected to a secure wifi","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type internal secure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type internal:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
		
	end
	

	rule "AccessRequest Detection open asset type strictly confidential secure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="STRICTLY_CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption matches ".*WPA2.*")
		not AccessRequest(event=="AccessRequest Detection open asset type strictly confidential secure wifi") 

	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open asset type strictly confidential secure wifi");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		//int id = Rt2aeGlobal.composeAccessRequest(e,conn,"DECIDE", "wifiencryption!=WPA2");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Action denied: This is a strictly confidential asset","ALLOW","<resourceType></resourceType>");
		StatusGlobal.log("****Event conn****:"+conn);
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed: This is a strictly confidential asset, but you are connected to a secure wifi","ALLOW","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type strictly confidential secure wifi");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type strictly confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
		
	end
	
	
	rule "AccessRequest Detection open asset type PUBLIC"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="PUBLIC")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true) //demo
		not AccessRequest(event=="AccessRequest Detection open asset type PUBLIC")
		//not AccessRequest(event==e.path)
	then
		StatusGlobal.log("1.2.A new AccessRequest has been detected: FileObserverEvent. Type open asset type PUBLIC");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		//int id = Rt2aeGlobal.composeAccessRequest(e,conn,"ALLOW", "any");
		StatusGlobal.log("****Event****:"+e);
		if(e!=null){
			int id = Rt2aeGlobal.composeAccessRequest(e,"Action allowed, this is a public file","ALLOW","<resourceType>"+e.getResourceType()+"</resourceType>");
			AccessRequest request = new AccessRequest();
			//request.setEvent(e.getPath());
			request.setEvent("AccessRequest Detection open asset type PUBLIC");
			StatusGlobal.log("**********"+id);
			StatusGlobal.log("AccessRequest Detection open asset type PUBLIC:"+e.getEvent() + " " + e.getTimestamp());
			request.setId(id);
			request.setEvent_date(new Date(System.currentTimeMillis()));
			insert(request);
			////retract(e);
		}else{
			StatusGlobal.log("****Rule open asset type PUBLIC with event null******");
		}	
	end
	
//	rule "AccessRequest Detection open type"
//	enabled false
//	no-loop true
//	dialect "mvel"
//	when
//		e: FileObserverEvent(event=="open")
//		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true) //demo
//		not AccessRequest(event=="AccessRequest Detection open type")
//	then
//		StatusGlobal.log("1.3.A new AccessRequest has been detected: FileObserverEvent. Type open");
//		Rt2aeGlobal.setStatus(Constants.STARTED);
//		int id = Rt2aeGlobal.composeAccessRequest(e,conn,"DECIDE", "wifiencryption!=WPA2");		
//		AccessRequest request = new AccessRequest();
//		request.setEvent("AccessRequest Detection open type");
//		StatusGlobal.log("**********"+id);
//		StatusGlobal.log("AccessRequest Detection open type:"+e.getEvent() + " " + e.getTimestamp());
//		request.setId(id);
//		request.setEvent_date(new Date(System.currentTimeMillis()));
//		insert(request);
//		retract(e);
//	end
	
//TODO Changes for System test	
rule "AccessRequest ClientServer Connectivity"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="post")
		not AccessRequest(event=="AccessRequest ClientServer Connectivity")
	then
		StatusGlobal.log("1.4.A new AccessRequest has been detected: FileObserverEvent. Type post");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e);
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest ClientServer Connectivity");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end
	
rule "AccessRequest Detection access type"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="access")
		not AccessRequest(event=="AccessRequest Detection access type")
	then
		StatusGlobal.log("1.5.A new AccessRequest has been detected: FileObserverEvent. Type access");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e);
		//GAP (we associate the access requests by id)
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection access type");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end	
	

	
rule "Connectivity"
	no-loop true
	dialect "mvel"
	when
		e: ConnectivityEvent()
	then
		
		StatusGlobal.log("1.A new ConnectivityEvent has been detected");		

	end
	
rule "Blacklist app 00001"
	no-loop true
	dialect "java"
	enabled false
	when
		e: AppObserverEvent(name=="Gmail",event=="open_application")
		not AccessRequest(event=="Blacklist app 00001")
	then
		StatusGlobal.log("A blacklisted app has been detected: AppObserverEvent.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening harmful application\nYou are trying to open an application which is considered harmful.\nWith this, other people can potentially access your data on your device.","DENY","<appname>Gmail</appname>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist app 00001");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	

	

	
	rule "Blacklist app 00002"
	no-loop true
	dialect "java"
	when
		e: AppObserverEvent(name=="Wifi Analyzer",event=="open_application")
		not AccessRequest(event=="Blacklist app 00002")
	then
		StatusGlobal.log("A blacklisted app has been detected: AppObserverEvent.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"You are trying to open an application which is considered harmful.\nOther people can gain control over your device.","DENY","<appname>Wifi Analyzer</appname>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist app 00002");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	rule "User Behavior"
	no-loop true
	dialect "mvel"
	when
		u:UserBehaviorEvent()
	then
		StatusGlobal.log("USER BEHAVIOR DETECTED:"+u.getAction());
		Rt2aeGlobal.notifyUserBehavior(u);
	end	


	rule "AccessRequest Email without Attachments"
	no-loop true
	dialect "mvel"
	when
		e:EmailEvent(numberAttachments==0)
		not AccessRequest(event=="AccessRequest Email without Attachments")
	then
		StatusGlobal.log("EMAIL DETECTED:"+e.getSubject()+ "Request id:"+ e.getHashId());
		int id = Rt2aeGlobal.composeAccessRequest(e,"Email action allowed","ALLOW", "<noAttachments>0</noAttachments>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Email without Attachments");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end	
	
	rule "AccessRequest Email with Attachments"
	no-loop true
	dialect "mvel"
	when
		v: VirusFoundEvent()
		e:EmailEvent(numberAttachments>0)
		not AccessRequest(event=="AccessRequest Email with Attachments")
	then
		StatusGlobal.log("EMAIL DETECTED:"+e.getSubject());
		int id = Rt2aeGlobal.composeAccessRequest(e,"Sending e-mail with virus\nYour system is infected with a virus and you want to send an attachment via e-mail.\nThis may cause critical system failure and puts the receiver at risk. Remove the virus first.","DENY", "<noAttachments>1</noAttachments>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Email with Attachments");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end	
	
	rule "VirusCleaned"
	no-loop true
	dialect "mvel"
	when
		c: VirusCleanedEvent()
		v: VirusFoundEvent()
	then
		StatusGlobal.log("VIRUS CLEANED   :"+c.getName);
		retract(v);
		StatusGlobal.log("REMOVED PREVIOUS VIRUS FOUND!");
		retract(c);
	end	

	
	rule "AccessRequest Change Security Property-password-protected"
	no-loop true
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isPasswordProtected==false)
		//d: DeviceProtectionEvent(isPasswordProtected==false)
		not AccessRequest(event=="AccessRequest Change Security Property-password-protected")
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.");
		int id = Rt2aeGlobal.composeAccessRequest(e,"Disabling screen lock\nYou are trying to disable screen lock, which is an important security mechanism.\nWithout screen lock, other people with access to your device can obtain sensible data.","DENY", "<isPasswordProtected>false</isPasswordProtected>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-password-protected");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end
	
	rule "AccessRequest Change Security Property-screen-timeout"
	no-loop true
	dialect "java"
	when
		e: ChangeSecurityPropertyEvent()
		d: DeviceProtectionEvent(screenTimeoutInSeconds<60)
		not AccessRequest(event=="AccessRequest Change Security Property-screen-timeout")
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.");
		StatusGlobal.log("****Event change device protection****:"+d);
		if((d!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Insufficient screen lock timeout\nTime set for screen lock timeout is not sufficient, while it is an important security mechanism.\nWithout screen lock, other people with access to your device might access to restricted corporate information.","DENY", "<screenTimeoutInSeconds>"+d.getScreenTimeoutInSeconds()+"</screenTimeoutInSeconds>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-screen-timeout");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	rule "AccessRequest Disable Accessibility"
	no-loop true
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(accessibilityEnabled==false)
		not AccessRequest(event=="AccessRequest Disable Accessibility")
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent. ACCESIBILITY DISABLED");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"The screen lock is required by the security policies","DENY", "<isPasswordProtected>false</isPasswordProtected>");
		int id = Rt2aeGlobal.composeAccessRequest(e,"You are trying to disable accessibility, which is an important security mechanism for MUSES.\n This can cause the device having a lower level of security.","DENY", "<accessibilityEnabled>false</accessibilityEnabled>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Disable Accessibility");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end
	
	rule "ACL6 door_1"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="open_asset", path=="/sdcard/Swe/door_1", username=="muses2")
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open door 1 muses2");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e,null,"DENY", "<username>"+e.getUsername()+"</username>");
		AccessRequest request = new AccessRequest();
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type sensitive:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		
	end
	
	rule "ACL6 door_1 user muses"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="open_asset", path=="/sdcard/Swe/door_1", username=="muses")
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open door 1");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e,null,"ALLOW", "<username>"+e.getUsername()+"</username>");
		AccessRequest request = new AccessRequest();
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type sensitive:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		
	end

	
	rule "Required application list"
	no-loop true
	dialect "mvel"
	when
		//e: AppObserverEvent(eval(requiredApp(this.name)),event=="uninstall")
		e: AppObserverEvent(eval(requiredApp(this.appPackage)),event=="uninstall")
		not AccessRequest(event=="Required application list")
	then
		StatusGlobal.log("A required application is trying to get uninstalled.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****:"+e);
		int id = Rt2aeGlobal.composeAccessRequest(e,"Uninstalling important application\nYou are trying to uninstall an application that is important for your system's security. \nUninstalling the application makes your system vulnerable.","DENY","<packagename>"+e.getAppPackage()+"</packagename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Required application list");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);

	end
	
	rule "AccessRequest Detection Save File in a monitored folder"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="save_asset")
		not AccessRequest(event=="AccessRequest Detection Save File in a monitored folder")
		
	then
		StatusGlobal.log("1.3.A new AccessRequest has been detected: FileObserverEvent. Type Save File in a Monitored folder");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event fileobserver****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Saving confidential document\nYou want to save a confidential document on your device.\nIf you lose your device, other people may be able to access the document.","ALLOW","<path>"+e.getPath()+"</path>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection Save File in a monitored folder");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection save file type:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	
	rule "AccessRequest Detection Open File in a monitored folder"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*Swe.*", username=="muses")
		not AccessRequest(event=="AccessRequest Detection Open File in a monitored folder")
	then
		StatusGlobal.log("1.3.A new AccessRequest has been detected: FileObserverEvent. Type Open File in a Monitored folder");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event fileobserver****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Accessing file without permission\nYou want to access a file, but you do not have the permission to do so.\nThe organization's security policy doesn't allow you to access this file.","DENY","<path>"+e.getPath()+"</path>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection Open File in a monitored folder");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open file type:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


//New corporate policies


	rule "Antivirus not running"
	no-loop true
	salience 65000
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isTrustedAntivirusInstalled==false)
		not AccessRequest(event=="Antivirus not running")

	then
		
		StatusGlobal.log("New corporate policy. Id:9 ANTIVIRUS NOT RUNNING");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Avast Mobile Security (recommended corporate antivirus) is not running\nWithout antivirus, integrity of corporate data might be compromised","DENY", "<isTrustedAntivirusInstalled>false</isTrustedAntivirusInstalled>");
		int id = Rt2aeGlobal.composeAccessRequest(e,"Avast Mobile Security (antivirus corporativo recomendado) no esta en ejecucion\nSin antivirus, la integridad de datos corporativos pueden verse comprometidos.","DENY", "<isTrustedAntivirusInstalled>false</isTrustedAntivirusInstalled>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("Antivirus not running");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end


	rule "Rooted device"
	no-loop true
	salience 65000
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isRooted==true)
		not AccessRequest(event=="Rooted device")

	then
		
		StatusGlobal.log("New corporate policy. Id:1 ROOTED DEVICE");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Your device is rooted\nMalware can easily breach your mobile security. Gaining root access also entails circumventing the security restrictions put in place by the Android operating system","DENY", "<isRooted>true</isRooted>");
		int id = Rt2aeGlobal.composeAccessRequest(e,"El dispositivo esta rooteado\nLa seguridad del movil puede ser afectada por malware. Conseguir acceso root permite evitar restricciones de seguridad configuradas por el sistema operativo Android.","DENY", "<isRooted>true</isRooted>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("Rooted device");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end



	rule "Blacklist generic open"
	no-loop true
	dialect "java"
	when
		e: AppObserverEvent(eval(blacklistedApp(name)),event=="open_application")
		not AccessRequest(event=="Blacklist generic")
	then
		StatusGlobal.log("New corporate policy. Id:6 BLACKLISTED APP "+e.getName());
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****:"+e);
		if(e!=null){
		//int id = Rt2aeGlobal.composeAccessRequest(e,"You are trying to open an application which is considered harmful.\nOther people can gain control over your device.","DENY","<appname>"+e.getName()+"</appname>");
		int id = Rt2aeGlobal.composeAccessRequest(e,"Abriendo aplicacion peligrosa\nEsta intentando ejecutar una aplicacion considerada peligrosa\nOtras personas podrian acceder a la informacion de su dispositivo.","DENY","<appname>"+e.getName()+"</appname>");

		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist generic");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


	rule "Unsafe Storage"
	no-loop true
	dialect "mvel"
	when
		//e: AppObserverEvent(eval(unsafeStorage(this.appPackage)))
		e: PackageObserverEvent(eval(unsafeStorage(this.installedApps)))
		//e: PackageObserverEvent(installedApps not matches ".*cryptonite.*")
		not AccessRequest(event=="Unsafe Storage")
	then
		StatusGlobal.log("Safe storage is not enabled on device. Criptonite application is required");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****:"+e);
		int id = Rt2aeGlobal.composeAccessRequest(e,"Unsafe storage on device\nYou require to install a safe storage application to keep corporate data encrypted \nPlease, install Cryptonite from Google Play Store.","DENY","<installedApps>cryptonite</installedApps>");
		//int id = Rt2aeGlobal.composeAccessRequest(e,"Unsafe storage on device\nYou require to install a safe storage application to keep corporate data encrypted \nPlease, install Cryptonite from Google Play Store.","DENY","<appPackage>"+e.getAppPackage()+"</appPackage>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Unsafe Storage");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);


	end


	rule "Install not allowed application"
	no-loop true
	dialect "mvel"
	when
		//e: AppObserverEvent(eval(requiredApp(this.appPackage)),event=="install")
		e: AppObserverEvent(eval(blacklistedApp(this.appPackage)),event=="install")
		not AccessRequest(event=="Install not allowed application")
	then
		StatusGlobal.log("Application to be installed should not be allowed.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****:"+e);
		int id = Rt2aeGlobal.composeAccessRequest(e,"Installing application not allowed\nYou are trying to install an application that is forbidden by your system's security. \nPlease, do not proceed.","DENY","<packagename>"+e.getAppPackage()+"</packagename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Install not allowed application");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end



	rule "Zone 1 application restriction"
	no-loop true
	dialect "mvel"
	when
		e: LocationEvent(isWithinZone matches ".*1.*")
		e1: AppObserverEvent(appPackage matches ".*GoogleCamera.*",event=="open_application")
	then
		StatusGlobal.log("Zone 1 application restriction");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****:"+e1);
		int id = Rt2aeGlobal.composeAccessRequest(e1,"You are in a restricted area\nYou are trying to use an application that is forbidden in the current zone. \nPlease, do not proceed.","DENY","<packagename>"+e1.getAppPackage()+"</packagename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Zone 1 application restriction");
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end


	rule "Open asset in restricted zone 1"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*Swe.*", username=="muses")
		e1: LocationEvent(isWithinZone matches ".*1.*")
		not AccessRequest(event=="Open asset in restricted area")
	then
		StatusGlobal.log("Open asset in restricted area");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Accessing file in a restricted area\nYou want to access a file, but you do not have the permission to do so within your current location.\nThe organization's security policy doesn't allow you to access this file at this zone.","DENY","<path>"+e.getPath()+"</path>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("Open asset in restricted area");
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open file type:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


	rule "Security Incident"
	no-loop true
	dialect "java"
	when
		e: SecurityIncidentEvent()
		e1: ChangeSecurityPropertyEvent(deviceId==e.deviceId)

	then
		StatusGlobal.log("SECURITY INCIDENT******************************");
		StatusGlobal.log("WIPE DEVICE: "+e.getDeviceId());
		StatusGlobal.log("SESSION ID: "+e1.getSessionId()+" TYPE:"+e1.getType());
		Rt2aeGlobal.wipeDevice(e,e1.getSessionId());
	end


