package MusesDrl


global eu.musesproject.server.eventprocessor.correlator.global.StatusGlobal StatusGlobal
global eu.musesproject.server.eventprocessor.correlator.global.Rt2aeGlobal Rt2aeGlobal

import eu.musesproject.server.eventprocessor.correlator.model.owl.AccessRequest
import eu.musesproject.server.eventprocessor.correlator.model.owl.AddNoteEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.AppObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.ConfigSyncEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.EmailEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.Event
import eu.musesproject.server.eventprocessor.correlator.model.owl.FileObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.FileAccessPermissionEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.OpenFileEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.ConnectivityEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.UserBehaviorEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.VirusCleanedEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.VirusFoundEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.ChangeSecurityPropertyEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.DeviceProtectionEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.SensorAppEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.PackageObserverEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.PasswordEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.LocationEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.SecurityIncidentEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.USBDeviceConnectedEvent
import eu.musesproject.server.eventprocessor.correlator.model.owl.Opportunity
import eu.musesproject.server.eventprocessor.util.Constants
import java.util.ArrayList
import java.util.Date
import java.util.StringTokenizer

declare Event
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare AppObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare AccessRequest
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare FileObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end


declare FileAccessPermissionEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare OpenFileEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare EmailEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare VirusCleanedEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare VirusFoundEvent
	@role( event )
	@timestamp ( event_date )
	@expires (10m)
end

declare ConnectivityEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare UserBehaviorEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end


declare ChangeSecurityPropertyEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare DeviceProtectionEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare SensorAppEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end


declare PackageObserverEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare LocationEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare SecurityIncidentEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare PasswordEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare USBDeviceConnectedEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare AddNoteEvent
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare Opportunity
	@role( event )
	@timestamp ( event_date )
	@expires (5s)
end

declare ConfigSyncEvent
	@role( event )
	@timestamp ( event_date )
	@expires (1d)
end



function boolean requiredApp(String name){
	boolean result = false;
	System.out.println("Required:"+name);
	if (name.contains("com.avast.android.mobilesecurity")){
		result = true;
	}else if (name.contains("com.lotus.sync.traveler")){
		result = true;
	}else if (name.contains("net.openvpn.openvpn")){
		result = true;
	}
	System.out.println("Required result:"+result);
	return result;
}

function boolean requiredAppWindows(String name){
	boolean result = false;
	System.out.println("Required win:"+name);
	if (name.contains("vast")){
		result = true;
	}
	System.out.println("Required result win:"+result);
	return result;
}

function boolean unsafeStorage(String name){
	System.out.println("Safe storage input:"+name);
	boolean result = true;
	if (name.contains("cryptonite")){
		result = false;
	}
	System.out.println("Unsafe storage result:"+result);

	return result;
}

function boolean unsafeStorageWindows(String name){
	System.out.println("Safe storage input windows:"+name);
	boolean result = true;
	if (name.contains("TrueCrypt")){
		result = false;
	}
	System.out.println("Unsafe storage result windows:"+result);

	return result;
}

function boolean blacklistedApp(String name){
	boolean result = false;
	if (name.contains("orrent")){
		result = true;
	}else if (name.contains("vuze")){
		result = true;
	}

	return result;
}


function String eventSignature(Event event){
	String result = null;
	if (event instanceof FileObserverEvent){
		result = "";
		FileObserverEvent fEvent = (FileObserverEvent)event;
		result += fEvent.getType();
		result += fEvent.getEvent();
		result += fEvent.getPath();
		result += fEvent.getResourceType();
	}
	return result;
}

rule "Rule firing"
	no-loop true
	dialect "mvel"
	when
		e: Event()
	then
		StatusGlobal.log("-------------------------------------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("Rule firing correctly working!");
		StatusGlobal.log("User:"+e.getUsername()+" Device:"+e.getDeviceId());
		StatusGlobal.log("SessionId:"+e.getSessionId());
		StatusGlobal.log("Event type:"+e.getType());
		//int id = Rt2aeGlobal.sendDefaultDevicePolicy(e);

	end

rule "Config sync"
	no-loop true
	dialect "mvel"
	when
		e: ConfigSyncEvent()
	then
		StatusGlobal.log("-------------------------------------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("Config sync received!");
		StatusGlobal.log("User:"+e.getUsername()+" Device:"+e.getDeviceId());
		StatusGlobal.log("SessionId:"+e.getSessionId());
		StatusGlobal.log("Os:"+e.getOs());


	end	

	
rule "Sensor app"
	no-loop true
	dialect "mvel"
	when
		e: SensorAppEvent()
	then
		StatusGlobal.log("-------------------------------------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("SensorAppEvent!");
		StatusGlobal.log("User:"+e.getUsername()+" Device:"+e.getDeviceId());

	end

	
rule "ResourceType set"
	no-loop true
	dialect "mvel"
	salience 65500
	when
		e: FileObserverEvent(resourceType=="null",path matches ".*SWE.*")
	then
		StatusGlobal.log("----------------------------File sensor with no resourceType---------------------------------------------");
		StatusGlobal.setStatus(Constants.STARTED);
		e.setResourceType("CONFIDENTIAL");
		update(e);


	end	

rule "AccessRequest Detection open asset type confidential unsecure wifi "
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*onfidential.*")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="AccessRequest Detection open asset type confidential unsecure wifi", sessionId==e.sessionId) 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi********");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****:");
		if((conn!=null)&&(e!=null)){
		if (!e.getResourceName().contains("up_to")){
		//int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type confidential unsecure wifi","DECIDE","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type confidential unsecure wifi","DECIDE","<resourceName>"+e.getResourceName()+"</resourceName>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type confidential unsecure wifi");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);
		}
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


rule "AccessRequest Detection open asset type internal unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="INTERNAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="AccessRequest Detection open asset type internal unsecure wifi", sessionId==e.sessionId) 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi********");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****:");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type internal unsecure wifi","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type internal unsecure wifi");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type internal:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


rule "AccessRequest Detection open asset type strictly confidential unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="STRICTLY_CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="AccessRequest Detection open asset type strictly confidential unsecure wifi", sessionId==e.sessionId) 
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open-unsecure wifi********");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event conn****");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type strictly confidential unsecure wifi","DENY","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type strictly confidential unsecure wifi");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type strictly confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	





rule "AccessRequest Detection open asset type internal secure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="INTERNAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="AccessRequest Detection open asset type internal secure wifi", sessionId==e.sessionId) 

	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open asset type internal secure wifi********");
		Rt2aeGlobal.setStatus(Constants.STARTED);

		StatusGlobal.log("****Event conn****");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type internal secure wifi","ALLOW","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type internal secure wifi");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type internal:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
		
	end
	

	rule "AccessRequest Detection open asset type strictly confidential secure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="STRICTLY_CONFIDENTIAL")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="AccessRequest Detection open asset type strictly confidential secure wifi", sessionId==e.sessionId) 

	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open asset type strictly confidential secure wifi********");
		Rt2aeGlobal.setStatus(Constants.STARTED);

		StatusGlobal.log("****Event conn****");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type strictly confidential secure wifi","ALLOW","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		AccessRequest request = new AccessRequest();
		//request.setEvent(e.getPath());
		request.setEvent("AccessRequest Detection open asset type strictly confidential secure wifi");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type strictly confidential:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
		
	end
	
	
	rule "AccessRequest Detection open asset type PUBLIC"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", resourceType=="PUBLIC")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, sessionId==e.sessionId) //demo
		not AccessRequest(event=="AccessRequest Detection open asset type PUBLIC", sessionId==e.sessionId)
		//not AccessRequest(event==e.path)
	then
		StatusGlobal.log("1.2.A new AccessRequest has been detected: FileObserverEvent. Type open asset type PUBLIC********");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event****");
		if(e!=null){
			int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection open asset type PUBLIC","ALLOW","<resourceType>"+e.getResourceType()+"</resourceType>");
			AccessRequest request = new AccessRequest();
			//request.setEvent(e.getPath());
			request.setEvent("AccessRequest Detection open asset type PUBLIC");
			request.setSessionId(e.getSessionId());
			StatusGlobal.log("**********"+id);
			StatusGlobal.log("AccessRequest Detection open asset type PUBLIC:"+e.getEvent() + " " + e.getTimestamp());
			request.setId(id);
			request.setEvent_date(new Date(System.currentTimeMillis()));
			insert(request);
			////retract(e);
		}else{
			StatusGlobal.log("****Rule open asset type PUBLIC with event null******");
		}	
	end
	

	
//TODO Changes for System test	
rule "AccessRequest ClientServer Connectivity"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="post")
		not AccessRequest(event=="AccessRequest ClientServer Connectivity", sessionId==e.sessionId)
	then
		StatusGlobal.log("1.4.A new AccessRequest has been detected: FileObserverEvent. Type post");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e);
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest ClientServer Connectivity");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end
	
rule "AccessRequest Detection access type"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="access")
		not AccessRequest(event=="AccessRequest Detection access type", sessionId==e.sessionId)
	then
		StatusGlobal.log("1.5.A new AccessRequest has been detected: FileObserverEvent. Type access");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequest(e);
		//GAP (we associate the access requests by id)
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection access type");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end	
	

	
rule "Connectivity"
	no-loop true
	dialect "mvel"
	when
		e: ConnectivityEvent()
	then
		
		StatusGlobal.log("1.A new ConnectivityEvent has been detected");		

	end
	
rule "Blacklist app 00001"
	no-loop true
	dialect "java"
	enabled false
	when
		e: AppObserverEvent(name=="Gmail",event=="open_application")
		not AccessRequest(event=="Blacklist app 00001", sessionId==e.sessionId)
	then
		StatusGlobal.log("A blacklisted app has been detected: AppObserverEvent.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****");
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Blacklist app 00001","DENY","<appname>Gmail</appname>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist app 00001");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	

	

	
	rule "Blacklist app 00002"
	no-loop true
	dialect "java"
	when
		e: AppObserverEvent(name=="Wifi Analyzer",event=="open_application")
		not AccessRequest(event=="Blacklist app 00002", sessionId==e.sessionId)
		not ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("A blacklisted app has been detected: AppObserverEvent.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Blacklist app 00002","DENY","<appname>Wifi Analyzer</appname>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist app 00002");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	rule "User Behavior"
	no-loop true
	dialect "mvel"
	when
		u:UserBehaviorEvent()
	then
		StatusGlobal.log("USER BEHAVIOR DETECTED:"+u.getAction());
		Rt2aeGlobal.notifyUserBehavior(u);
	end	


	rule "AccessRequest Email without Attachments"
	no-loop true
	dialect "mvel"
	when
		e:EmailEvent(numberAttachments==0)
		not AccessRequest(event=="AccessRequest Email without Attachments", sessionId==e.sessionId)
	then
		StatusGlobal.log("EMAIL DETECTED:"+e.getSubject()+ "Request id:"+ e.getHashId());
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Email without Attachments","ALLOW", "<noAttachments>0</noAttachments>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Email without Attachments");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end	
	
	rule "AccessRequest Email with Attachments"
	no-loop true
	dialect "mvel"
	when
		v: VirusFoundEvent()
		e:EmailEvent(numberAttachments>0, sessionId==v.sessionId)
		not AccessRequest(event=="AccessRequest Email with Attachments", sessionId==v.sessionId)
	then
		StatusGlobal.log("EMAIL DETECTED:"+e.getSubject()+"**********SESSION-ID");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Email with Attachments","DENY", "<noAttachments>1</noAttachments>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Email with Attachments");
		request.setSessionId(v.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end	
	
	rule "VirusCleaned"
	no-loop true
	dialect "mvel"
	when
		c: VirusCleanedEvent()
		v: VirusFoundEvent(sessionId==c.sessionId)
	then
		StatusGlobal.log("VIRUS CLEANED   :"+c.getName);
		retract(v);
		StatusGlobal.log("REMOVED PREVIOUS VIRUS FOUND!");
		retract(c);
	end	

	
	rule "AccessRequest Change Security Property-password-protected"
	no-loop true
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isPasswordProtected==false)
		not AccessRequest(event=="AccessRequest Change Security Property-password-protected", sessionId==e.sessionId)
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Change Security Property-password-protected","DENY", "<isPasswordProtected>false</isPasswordProtected>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-password-protected");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end

	rule "AccessRequest Initial Security Property-password-protected"
	no-loop true
	dialect "mvel"
	when
		
		e: DeviceProtectionEvent(isPasswordProtected==false)
		not AccessRequest(event=="AccessRequest Change Security Property-password-protected", sessionId==e.sessionId)
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Change Security Property-password-protected","DENY", "<isPasswordProtected>false</isPasswordProtected>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-password-protected");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end
	
	rule "AccessRequest Change Security Property-screen-timeout"
	no-loop true
	dialect "java"
	when
		e: ChangeSecurityPropertyEvent(screenTimeoutInSeconds>60)
		not AccessRequest(event=="AccessRequest Change Security Property-screen-timeout", sessionId==e.sessionId)
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.**********");
		StatusGlobal.log("****Event change device protection****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Change Security Property-screen-timeout","DENY", "<screenTimeoutInSeconds>"+e.getScreenTimeoutInSeconds()+"</screenTimeoutInSeconds>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-screen-timeout");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end

	rule "AccessRequest Initial Security Property-screen-timeout"
	no-loop true
	dialect "java"
	when
		e: DeviceProtectionEvent(screenTimeoutInSeconds>60)
		not AccessRequest(event=="AccessRequest Change Security Property-screen-timeout", sessionId==e.sessionId)
	then
		StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent.**********");
		StatusGlobal.log("****Event change device protection****:"+e);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Change Security Property-screen-timeout","DENY", "<screenTimeoutInSeconds>"+e.getScreenTimeoutInSeconds()+"</screenTimeoutInSeconds>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Change Security Property-screen-timeout");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	//rule "AccessRequest Disable Accessibility"
	//no-loop true
	//dialect "mvel"
	//when
	//	e: ChangeSecurityPropertyEvent(accessibilityEnabled==false)
	//	not AccessRequest(event=="AccessRequest Disable Accessibility", sessionId==e.sessionId)
	//then
	//	StatusGlobal.log("CHANGE SECURITY PROPERTY 1.4.A new AccessRequest has been detected: ChangeSecurityPropertyEvent. ACCESIBILITY DISABLED");
	//	int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Disable Accessibility","DENY", "<accessibilityEnabled>false</accessibilityEnabled>");
		
	//	AccessRequest request = new AccessRequest();
	//	request.setEvent("AccessRequest Disable Accessibility");
	//	request.setSessionId(e.getSessionId());
	//	StatusGlobal.log("**********"+id);
	//	request.setId(id);
	//	request.setEvent_date(new Date(System.currentTimeMillis()));
	//	insert(request);

	//end
	
	rule "ACL6 door_1"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="open_asset", path=="/sdcard/SWE/door_1", username=="muses2")
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open door 1 muses2");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,null,"DENY", "<username>"+e.getUsername()+"</username>");
		AccessRequest request = new AccessRequest();
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type sensitive:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		
	end
	
	rule "ACL6 door_1 user muses"
	no-loop true
	dialect "mvel"
	when
		e: FileObserverEvent(event=="open_asset", path=="/sdcard/SWE/door_1", username=="muses")
	then
		StatusGlobal.log("1.1.A new AccessRequest has been detected: FileObserverEvent. Type open door 1");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,null,"ALLOW", "<username>"+e.getUsername()+"</username>");
		AccessRequest request = new AccessRequest();
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open asset type sensitive:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		
	end

	
	rule "Required application list"
	no-loop true
	dialect "mvel"
	enabled false
	when
		//e: AppObserverEvent(eval(requiredApp(this.name)),event=="uninstall")
		e: AppObserverEvent(eval(requiredApp(this.appPackage)),event=="uninstall")
		not AccessRequest(event=="Required application list", sessionId==e.sessionId)
		not ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("A required application is trying to get uninstalled.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****:"+e);
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Required application list","DENY","<packagestatus>REMOVED</packagestatus>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Required application list");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);

	end
	
	rule "AccessRequest Detection Save File in a monitored folder"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="save_asset")
		not AccessRequest(event=="AccessRequest Detection Save File in a monitored folder", sessionId==e.sessionId)
		
	then
		StatusGlobal.log("1.3.A new AccessRequest has been detected: FileObserverEvent. Type Save File in a Monitored folder");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event fileobserver****");
		if(e!=null){
		//int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection Save File in a monitored folder","ALLOW","<path>"+e.getPath()+"</path>");		
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection Save File in a monitored folder","ALLOW","<resourceName>"+e.getResourceName()+"</resourceName>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection Save File in a monitored folder");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection save file type:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end
	
	
	rule "AccessRequest Detection Open File in a monitored folder"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*SWE.*", username=="muses-user")
		not AccessRequest(event=="AccessRequest Detection Open File in a monitored folder", sessionId==e.sessionId)
	then
		StatusGlobal.log("1.3.A new AccessRequest has been detected: FileObserverEvent. Type Open File in a Monitored folder");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event fileobserver****");
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"AccessRequest Detection Open File in a monitored folder","DENY","<path>"+e.getPath()+"</path>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("AccessRequest Detection Open File in a monitored folder");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		StatusGlobal.log("AccessRequest Detection open file type:"+e.getEvent() + " " + e.getTimestamp());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


//New corporate policies


	rule "Antivirus not running"
	no-loop true
	salience 0
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isTrustedAntivirusInstalled==false)
		not AccessRequest(event=="Antivirus not running", sessionId==e.sessionId)

	then
		
		StatusGlobal.log("New corporate policy. Id:9 ANTIVIRUS NOT RUNNING");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Antivirus not running","DENY", "<isTrustedAntivirusInstalled>false</isTrustedAntivirusInstalled>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("Antivirus not running");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end


	rule "Rooted device"
	no-loop true
	salience 65000
	dialect "mvel"
	when
		e: ChangeSecurityPropertyEvent(isRooted==true)
		not AccessRequest(event=="Rooted device", sessionId==e.sessionId)

	then
		
		StatusGlobal.log("New corporate policy. Id:1 ROOTED DEVICE");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Rooted device","DENY", "<isRooted>true</isRooted>");
		
		AccessRequest request = new AccessRequest();
		request.setEvent("Rooted device");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
	end



	rule "Blacklist generic open"
	no-loop true
	dialect "java"
	when
		e: AppObserverEvent(eval(blacklistedApp(name)),event=="open_application")
		not AccessRequest(event=="Blacklist generic", sessionId==e.sessionId)
	then
		StatusGlobal.log("New corporate policy. Id:6 BLACKLISTED APP ");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****");
		if(e!=null){

		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Blacklist generic open","DENY","<appname>"+e.getName()+"</appname>");

		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist generic");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


	rule "Unsafe Storage"
	no-loop true
	dialect "mvel"
	when
		e: PackageObserverEvent(eval(unsafeStorage(this.installedApps)))
		not AccessRequest(event=="Unsafe Storage", sessionId==e.sessionId)
		not ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("Safe storage is not enabled on device. Criptonite application is required");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Unsafe Storage","DENY","<installedApps>cryptonite</installedApps>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Unsafe Storage");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);

	end


	rule "Install not allowed application"
	no-loop true
	dialect "mvel"
	when
		//e: AppObserverEvent(eval(requiredApp(this.appPackage)),event=="install")
		e: AppObserverEvent(eval(blacklistedApp(this.appPackage)),event=="install")
		not AccessRequest(event=="Install not allowed application", sessionId==e.sessionId)
	then
		StatusGlobal.log("Application to be installed should not be allowed.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Install not allowed application","DENY","<packagename>"+e.getAppPackage()+"</packagename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Install not allowed application");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end



	rule "Zone 1 application restriction"
	no-loop true
	dialect "mvel"
	when
		e: LocationEvent(isWithinZone matches ".*1.*")
		e1: AppObserverEvent(appPackage matches ".*amera.*",event=="open_application", sessionId==e.sessionId)
	then
		StatusGlobal.log("Zone 1 application restriction.**********");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e1,"Zone 1 application restriction","DENY","<packagename>"+e1.getAppPackage()+"</packagename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Zone 1 application restriction");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end


	//rule "Open asset in restricted zone 1"
	//no-loop true
	//dialect "java"
	//when
	//	e: FileObserverEvent(event=="open_asset", path matches ".*SWE.*", username=="muses")
	//	e1: LocationEvent(isWithinZone matches ".*1.*", sessionId==e.sessionId)
	//	not AccessRequest(event=="Open asset in restricted area", sessionId==e.sessionId)
	//then
	//	StatusGlobal.log("Open asset in restricted area**********");
	//	Rt2aeGlobal.setStatus(Constants.STARTED);
	//	if(e!=null){
	//	int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Open asset in restricted zone 1","DENY","<path>"+e.getPath()+"</path>");		
	//	AccessRequest request = new AccessRequest();
	//	request.setEvent("Open asset in restricted area");
	//	request.setSessionId(e.getSessionId());
	//	StatusGlobal.log("**********"+id);
	//	StatusGlobal.log("AccessRequest Detection open file type:"+e.getEvent() + " " + e.getTimestamp());
	//	request.setId(id);
	//	request.setEvent_date(new Date(System.currentTimeMillis()));
	//	insert(request);
	//	}else{
	//	StatusGlobal.log("*****Null object*****");
	//	}
	//end


	rule "Security Incident"
	no-loop true
	dialect "java"
	when
		e: SecurityIncidentEvent()
		e1: ChangeSecurityPropertyEvent(deviceId==e.deviceId, sessionId==e.sessionId)

	then
		StatusGlobal.log("SECURITY INCIDENT*********************");
		StatusGlobal.log("WIPE DEVICE: "+e.getDeviceId());
		StatusGlobal.log("SESSION ID: "+e1.getSessionId()+" TYPE:"+e1.getType());
		Rt2aeGlobal.wipeDevice(e,e1.getSessionId());
	end



	rule "User entered password"
	no-loop true
	dialect "java"
	when
		e: PasswordEvent()
		not AccessRequest(event=="User entered password", sessionId==e.sessionId)

	then
		StatusGlobal.log("PASSWORD EVENT******************************");
		//Rt2aeGlobal.setStatus(Constants.STARTED);
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"User entered password","DENY","<packagename>"+e.getPackageName()+"</packagename>");		
		AccessRequest request = new AccessRequest();
		request.setEvent("User entered password");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}

	end

	rule "USB device connected"
	no-loop true
	dialect "java"
	when
		e: USBDeviceConnectedEvent()


	then
		StatusGlobal.log("USB DEVICE CONNECTED EVENT******************************");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"USB device connected","DENY","");

	end
	

	rule "Emas Add Note"
	no-loop true
	dialect "java"
	when
		e: AddNoteEvent()
		//conn: ConnectivityEvent()
	then
		StatusGlobal.log("EMAS ADD NOTE EVENT******************************");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Emas Add Note","DENY","<wifienabled>false</wifienabled>");
	end


	rule "Access file in monitored folder while bluetooth enabled"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*SWE.*")
		conn: ConnectivityEvent(bluetoothConnected=="TRUE", sessionId==e.sessionId)
		not AccessRequest(event=="Access file in monitored folder while bluetooth enabled", sessionId==e.sessionId)
	then
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("Access file in monitored folder while bluetooth enabled**********");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening confidential document with bluetooth enabled\nYou have bluetooth enabled and try to open a confidential document.\nInformation sent through bluetooh is not encrypted and might be visible to other people.Go to Settings > Bluetooh and disable it","DENY","<bluetoothconnected>"+conn.getBluetoothConnected()+"</bluetoothconnected>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Access file in monitored folder while bluetooth enabled");
		request.setSessionId(e.getSessionId());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end


	rule "Access file in monitored folder unsecure wifi"
	no-loop true
	dialect "java"
	when
		e: FileObserverEvent(event=="open_asset", path matches ".*onfidential.*", resourceName matches ".*aybe.*")
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*", sessionId==e.sessionId)
		not AccessRequest(event=="Access file in monitored folder unsecure wifi", sessionId==e.sessionId)
	then
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("Access file in monitored folder unsecure wifi**********");
		if((conn!=null)&&(e!=null)){
		int id = Rt2aeGlobal.composeAccessRequest(e,"Opening confidential document in unsecure network\nYou are connected to an unsecure network and try to open a confidential document.\nInformation sent over this network is not encrypted and might be visible to other people can observe. Switch to a secure network.Go to Settings > Select a WiFi and click on Advanced options. In section Security, a network is considered secure if it uses WPA2 encryption protocol.","DECIDE","<resourcename>"+e.getResourceName()+"</resourcename>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Access file in monitored folder unsecure wifi");
		request.setSessionId(e.getSessionId());
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end	


	rule "Opportunity"
	no-loop true
	dialect "java"
	when
		o: Opportunity()
		e: FileObserverEvent(event=="open_asset", path matches ".*confidential.*", sessionId==o.sessionId)
		conn: ConnectivityEvent(wifiConnected==true,wifiEnabled==true, wifiEncryption not matches ".*WPA2.*", sessionId==o.sessionId)
		ar: AccessRequest(id==o.decisionId)
	then
		StatusGlobal.log("OPPORTUNITY RECEIVED******************************");
		StatusGlobal.log("Opportunity**********SESSION-ID-e:"+e.getSessionId()+" conn:"+conn.getSessionId()+" o:"+o.getSessionId());
		int id = Rt2aeGlobal.composeAccessRequestOpportunity(o,e,"Opening confidential document in unsecure network\nYou are connected to an unsecure network and try to open a confidential document.\nInformation sent over this network is not encrypted and might be visible to other people can observe. Switch to a secure network.Go to Settings > Select a WiFi and click on Advanced options. In section Security, a network is considered secure if it uses WPA2 encryption protocol.","DECIDE","<wifiencryption>"+conn.getWifiEncryption()+"</wifiencryption>");
		
	end	


	//Windows


	rule "Unsafe Storage Windows"
	no-loop true
	dialect "mvel"
	when
		e: PackageObserverEvent(eval(unsafeStorageWindows(this.installedApps)))
		not AccessRequest(event=="Unsafe Storage Windows", sessionId==e.sessionId)
		ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("Safe storage is not enabled on device. TrueCrypt application is required");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver***");
		int id = Rt2aeGlobal.composeAccessRequest(e,"Unsecure storage on device
 You require to install a safe storage application to keep corporate data encrypted. Please, download TrueCrypt application from www.truecrypt.org and install it","DENY","<installedApps>truecrypt</installedApps>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Unsafe Storage Windows");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		retract(e);

	end


	
	rule "Blacklist windows app"
	no-loop true
	dialect "java"
	when
		e: AppObserverEvent(name matches ".*Dropbox.*",event=="open_application")
		not AccessRequest(event=="Blacklist windows app", sessionId==e.sessionId)
		ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("A blacklisted app has been detected: AppObserverEvent.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event app****");
		if(e!=null){
		int id = Rt2aeGlobal.composeAccessRequest(e,"You are trying to open an application which is considered harmful: Dropbox\nOther people can gain control over your device.","DENY","<appname>"+e.getName()+"</appname>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Blacklist windows app");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);
		////retract(e);
		}else{
		StatusGlobal.log("*****Null object*****");
		}
	end	


	rule "Required application list windows"
	no-loop true
	dialect "mvel"
	when
		e: AppObserverEvent(eval(requiredAppWindows(this.appPackage)),event=="uninstall")
		not AccessRequest(event=="Required application list windows", sessionId==e.sessionId)
		ConfigSyncEvent(sessionId==e.sessionId, os=="Windows")
	then
		StatusGlobal.log("A required application is trying to get uninstalled.");
		Rt2aeGlobal.setStatus(Constants.STARTED);
		StatusGlobal.log("****Event appobserver****");
		int id = Rt2aeGlobal.composeAccessRequestI18n(e,"Required application list","DENY","<packagestatus>REMOVED</packagestatus>");
		AccessRequest request = new AccessRequest();
		request.setEvent("Required application list windows");
		request.setSessionId(e.getSessionId());
		StatusGlobal.log("**********"+id);
		request.setId(id);
		request.setEvent_date(new Date(System.currentTimeMillis()));
		insert(request);

	end